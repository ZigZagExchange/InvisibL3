const Note = require("../../src/notes/noteUtils").Note;

const txInputs = {
  notesIn: [
    [
      0,
      1414463055584249975401255287664006444991531772864589842606436631324803797829n,
      3576190135707767864261393218654241707601949798812616969215456467228622391342n,
      1,
      7981335475664937316519500362527100412865917970581767624020042131014836227980n,
    ],
  ],
  notesOut: [
    [
      0,
      727633070800549199660756625430025559445577491715417070994469407397335168934n,
      8969482073994745989646499483515924597924306463384181226983111910408124871594n,
      1,
      834003395566619460640716593016299012513773791579815133988641347664136840889n,
    ],
    [
      0,
      4664522176072200182869991843466823882227951723133875615539504484163435564852n,
      17758111371773129660572234268461712141223098438209534612646069463410754767175n,
      1,
      7360371392286461288647308437408116161020919955410115205527958666453064068080n,
    ],
    [
      0,
      11380713548171564468083585056514611217084774002874478243001336223815285820088n,
      5193658344260070480120513469247693179147973846309511004901367741493380238389n,
      1,
      17361258852028224145793842525301447058545688371330854373138672285919529923976n,
    ],
  ],
  amountsIn: [422524000900n],
  amountsOut: [1534450000n, 15344500n, 420974206400n],
  blindingsIn: [113398076903969102566426825667700712n],
  blindingsOut: [
    1276607203306305937367492884618728566n,
    1000759621778768684955143009247101323n,
    1126903517287531754245723767531283545n,
  ],
  tokenSpent: 1,
  tokenSpentPrice: 2103540293n,
  tokenReceived: 2,
  tokenReceivedPrice: 30234045932n,
  Ko: [
    13059816953500762311906312386357263494459804028442072112684460509253615624503n,
    2980552948779669295768356845520663242041194802558674379886444324930999498768n,
  ],
  returnAddressSig: [
    3427810828294086229514740188052627143673939186776380845613841368033342502539n,
    17645345484196419827590715861631591046313977860412663464419452338297067250533n,
  ],
  signature: [
    21062555822657361153285306068125090785761212072058877897940885400854145011588n,
    14161100627954788297101727344554035608311162148023018020274121904589255325455n,
    21062555822657361153285306068125090785761212072058877897940885400854145011588n,
    21062555822657361153285306068125090785761212072058877897940885400854145011588n,
  ],
};

const returnAddressSigInputs = {
  c: txInputs.returnAddressSig[0],
  r: txInputs.returnAddressSig[1],
  tokenReceived: txInputs.tokenReceived,
  tokenReceivedPrice: txInputs.tokenReceivedPrice,
  Ko: txInputs.Ko,
};

const txHashInputs = {
  notesIn: [
    [
      0,
      1414463055584249975401255287664006444991531772864589842606436631324803797829n,
      3576190135707767864261393218654241707601949798812616969215456467228622391342n,
      1,
      7981335475664937316519500362527100412865917970581767624020042131014836227980n,
    ],
  ],
  notesOut: [
    [
      0,
      727633070800549199660756625430025559445577491715417070994469407397335168934n,
      8969482073994745989646499483515924597924306463384181226983111910408124871594n,
      1,
      834003395566619460640716593016299012513773791579815133988641347664136840889n,
    ],
    [
      0,
      4664522176072200182869991843466823882227951723133875615539504484163435564852n,
      17758111371773129660572234268461712141223098438209534612646069463410754767175n,
      1,
      7360371392286461288647308437408116161020919955410115205527958666453064068080n,
    ],
    [
      0,
      11380713548171564468083585056514611217084774002874478243001336223815285820088n,
      5193658344260070480120513469247693179147973846309511004901367741493380238389n,
      1,
      17361258852028224145793842525301447058545688371330854373138672285919529923976n,
    ],
  ],
  tokenSpent: 1,
  tokenSpentPrice: 2103540293n,
  retSigR:
    17643537881696815357093743847596019275859002323550406625536328263287551714013n,
};

const sumVerificationInputs = {
  amountsIn: txInputs.amountsIn,
  amountsOut: txInputs.amountsOut,
};

const verifySigInputs = {
  K: [
    [
      1414463055584249975401255287664006444991531772864589842606436631324803797829n,
      3576190135707767864261393218654241707601949798812616969215456467228622391342n,
    ],
  ],
  m: 9165911559291503304528092541042456645939822539586694179540438956593123542164n,
  c: 18072337828380066147314625972653403764132127309803010370463282016039672460193n,
  rs: [
    11171714171513904159971131164067164158713421940304377011527892340756407754092n,
    18072337828380066147314625972653403764132127309803010370463282016039672460193n,
    18072337828380066147314625972653403764132127309803010370463282016039672460193n,
  ],
};

const verifyCommitmentInputs = {
  C: [
    [
      8335733946071834698883013585698612085557666739823460394434079211486843042517n,
      15686892433797900135714327927078751280485706850387618477540162903172310491300n,
    ],
  ],
  amounts: [422524000900n],
  blindings: [113398076903969102566426825667700712n],
};

function padCommitmentInputs(n) {
  const newInputs = {};
  for (const [key, value] of Object.entries(verifyCommitmentInputs)) {
    if (key == "C") {
      newInputs[key] = padArrayEnd(value, n, [0]);
    } else {
      newInputs[key] = padArrayEnd(value, n, 0);
    }
  }
  // console.log(newInputs);
  return newInputs;
}

function padSumVerificationInputs(n) {
  const newInputs = {};
  for (const [key, value] of Object.entries(sumVerificationInputs)) {
    newInputs[key] = padArrayEnd(value, n, 0);
  }
  return newInputs;
}

function padSigVerificationInputs(n) {
  const newInputs = {};
  for (const [key, value] of Object.entries(verifySigInputs)) {
    if (key == "K") {
      newInputs[key] = padArrayEnd(value, n, [0n, 1n]);
    } else {
      newInputs[key] = value;
    }
  }
  return newInputs;
}

function padTxHashInputs(n) {
  const newInputs = {};
  for (const [key, value] of Object.entries(txHashInputs)) {
    if (key == "notesIn" || key == "notesOut") {
      newInputs[key] = padArrayEnd(value, n, [0n, 0n, 1n, 0n, 0n]);
    } else {
      newInputs[key] = value;
    }
  }
  return newInputs;
}

function padTxInputs(n) {
  const newInputs = {};
  for (const [key, value] of Object.entries(txInputs)) {
    if (key == "notesIn" || key == "notesOut") {
      newInputs[key] = padArrayEnd(value, n, [0n, 0n, 1n, 0n, 0n]);
    } else if (
      key == "amountsIn" ||
      key == "amountsOut" ||
      key == "blindingsIn" ||
      key == "blindingsOut"
    ) {
      newInputs[key] = padArrayEnd(value, n, 0);
    } else {
      newInputs[key] = value;
    }
  }
  return newInputs;
}

function padArrayEnd(arr, len, padding) {
  return arr.concat(Array(len - arr.length).fill(padding));
}

module.exports = {
  returnAddressSigInputs,
  sumVerificationInputs,
  txHashInputs,
  txInputs,
  verifySigInputs,
  padCommitmentInputs,
  padSumVerificationInputs,
  padSigVerificationInputs,
  padTxHashInputs,
  padTxInputs,
};
